import torch
import torch.nn as nn
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from models import ResNet18,ResBlock
from adversarialbox.utils import attack_over_test_data,test
from adversarialbox.attacks import PGD20

param = {
    'batch_size': 500,
    'test_batch_size': 100,
    'num_epochs': 120,
    'delay': 90,
    'learning_rate': 1e-3,
    'weight_decay': 4e-3,
    'epsilon': 2/255,
    'b':9,
    'y':100,
    'hold_out_size': 150,
}
# Data loaders
train_dataset = datasets.CIFAR10(root='./data/',train=True, download=True, 
    transform=transforms.ToTensor())
loader_train = torch.utils.data.DataLoader(train_dataset, 
    batch_size=param['batch_size'], shuffle=True)

test_dataset = datasets.CIFAR10(root='./data/', train=False, download=True, 
    transform=transforms.ToTensor())
loader_test = torch.utils.data.DataLoader(test_dataset, 
    batch_size=param['test_batch_size'], shuffle=True)


model = ResNet18(ResBlock)
model.load_state_dict(torch.load('./models/adv_trained_resnet18.pkl'))

if torch.cuda.is_available():
    print('CUDA ensabled.')
    model.cuda()

adversary_1 = PGD20(model,param['epsilon'],20,1.25)

print("clear sample test:")
test(model, loader_test)

print("adversarail sample test:")
attack_over_test_data(model, adversary_1,param,loader_test)
